
morse_to_light_m32u4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000001f0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb9  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abe  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000544  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000273  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000265b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 ef       	ldi	r30, 0xF0	; 240
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 38       	cpi	r26, 0x80	; 128
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  d2:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <lightf>:
 * 
 * Created: 5/30/2019
 * Author : PJS
 */ 
void lightf (char morseCode[128])
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	dc 01       	movw	r26, r24
  e0:	ec 01       	movw	r28, r24
	short morseUnit = 75;
	
	//PORTB |= (1 << PORTB0); //Turns off the diode.
	//PORTB &= ~(1 << PORTB0); //Turns on the diode.
	
	for (short j = 0; j < strlen(morseCode); j++)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	48 c0       	rjmp	.+144    	; 0x178 <lightf+0x9e>
	{
		if (morseCode[j] == '.')
  e8:	99 91       	ld	r25, Y+
  ea:	9e 32       	cpi	r25, 0x2E	; 46
  ec:	a9 f4       	brne	.+42     	; 0x118 <lightf+0x3e>
		{
			PORTB &= ~(1 << PORTB0);
  ee:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	4f e7       	ldi	r20, 0x7F	; 127
  f2:	89 ea       	ldi	r24, 0xA9	; 169
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	41 50       	subi	r20, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <lightf+0x1c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lightf+0x26>
 100:	00 00       	nop
			_delay_ms(morseUnit);
			
			PORTB |= (1 << PORTB0);
 102:	28 9a       	sbi	0x05, 0	; 5
 104:	4f e7       	ldi	r20, 0x7F	; 127
 106:	89 ea       	ldi	r24, 0xA9	; 169
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <lightf+0x30>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lightf+0x3a>
 114:	00 00       	nop
 116:	2e c0       	rjmp	.+92     	; 0x174 <lightf+0x9a>
			_delay_ms(morseUnit);
		}
		else if (morseCode[j] == ' ')
 118:	90 32       	cpi	r25, 0x20	; 32
 11a:	51 f4       	brne	.+20     	; 0x130 <lightf+0x56>
 11c:	4f ef       	ldi	r20, 0xFF	; 255
 11e:	82 e5       	ldi	r24, 0x52	; 82
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	41 50       	subi	r20, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <lightf+0x48>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lightf+0x52>
 12c:	00 00       	nop
 12e:	22 c0       	rjmp	.+68     	; 0x174 <lightf+0x9a>
		_delay_ms(2*morseUnit);
		else if (morseCode[j] == '/')
 130:	9f 32       	cpi	r25, 0x2F	; 47
 132:	51 f4       	brne	.+20     	; 0x148 <lightf+0x6e>
 134:	4f e7       	ldi	r20, 0x7F	; 127
 136:	8c ef       	ldi	r24, 0xFC	; 252
 138:	9a e0       	ldi	r25, 0x0A	; 10
 13a:	41 50       	subi	r20, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <lightf+0x60>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lightf+0x6a>
 144:	00 00       	nop
 146:	16 c0       	rjmp	.+44     	; 0x174 <lightf+0x9a>
		_delay_ms(3*morseUnit);
		else if (morseCode[j] == '-')
 148:	9d 32       	cpi	r25, 0x2D	; 45
 14a:	a1 f4       	brne	.+40     	; 0x174 <lightf+0x9a>
		{
			PORTB &= ~(1 << PORTB0);
 14c:	28 98       	cbi	0x05, 0	; 5
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	8c ef       	ldi	r24, 0xFC	; 252
 152:	9a e0       	ldi	r25, 0x0A	; 10
 154:	41 50       	subi	r20, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <lightf+0x7a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lightf+0x84>
 15e:	00 00       	nop
			_delay_ms(3*morseUnit);
			PORTB |= (1 << PORTB0);
 160:	28 9a       	sbi	0x05, 0	; 5
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	89 ea       	ldi	r24, 0xA9	; 169
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	41 50       	subi	r20, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <lightf+0x8e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lightf+0x98>
 172:	00 00       	nop
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	3f 4f       	sbci	r19, 0xFF	; 255
	short morseUnit = 75;
	
	//PORTB |= (1 << PORTB0); //Turns off the diode.
	//PORTB &= ~(1 << PORTB0); //Turns on the diode.
	
	for (short j = 0; j < strlen(morseCode); j++)
 178:	fd 01       	movw	r30, r26
 17a:	01 90       	ld	r0, Z+
 17c:	00 20       	and	r0, r0
 17e:	e9 f7       	brne	.-6      	; 0x17a <lightf+0xa0>
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	ea 1b       	sub	r30, r26
 184:	fb 0b       	sbc	r31, r27
 186:	2e 17       	cp	r18, r30
 188:	3f 07       	cpc	r19, r31
 18a:	08 f4       	brcc	.+2      	; 0x18e <lightf+0xb4>
 18c:	ad cf       	rjmp	.-166    	; 0xe8 <lightf+0xe>
			_delay_ms(3*morseUnit);
			PORTB |= (1 << PORTB0);
			_delay_ms(morseUnit);
		}
	}
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
#include <stdio.h>
#include "lightf.h"


int main(void)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	c0 58       	subi	r28, 0x80	; 128
 19e:	d1 09       	sbc	r29, r1
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << DDB0);
 1aa:	20 9a       	sbi	0x04, 0	; 4
	
	char inputMorse[128] = ".... . .-.. .-.. --- / .-- --- .-. .-.. -.. -.-.--"; //Hello world!
 1ac:	83 e3       	ldi	r24, 0x33	; 51
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	de 01       	movw	r26, r28
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	8a 95       	dec	r24
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x22>
 1be:	fe 01       	movw	r30, r28
 1c0:	f4 96       	adiw	r30, 0x34	; 52
 1c2:	8d e4       	ldi	r24, 0x4D	; 77
 1c4:	df 01       	movw	r26, r30
 1c6:	1d 92       	st	X+, r1
 1c8:	8a 95       	dec	r24
 1ca:	e9 f7       	brne	.-6      	; 0x1c6 <main+0x32>
	
	lightf(inputMorse);		
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	0e 94 6d 00 	call	0xda	; 0xda <lightf>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	c0 58       	subi	r28, 0x80	; 128
 1da:	df 4f       	sbci	r29, 0xFF	; 255
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
